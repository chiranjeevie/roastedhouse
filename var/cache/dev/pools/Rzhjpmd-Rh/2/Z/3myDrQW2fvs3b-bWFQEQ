<?php return array(PHP_INT_MAX, static function () {

    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['ApiPlatform\\Core\\Annotation\\ApiResource'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('ApiPlatform\\Core\\Annotation\\ApiResource')),
            clone ($p['Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity')),
            clone ($p['Doctrine\\ORM\\Mapping\\Entity'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Entity')),
            clone ($p['Doctrine\\ORM\\Mapping\\HasLifecycleCallbacks'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\HasLifecycleCallbacks')),
        ],
        null,
        [
            'stdClass' => [
                'itemOperations' => [
                    [
                        'get' => [
                            'access_control' => 'is_granted(\'IS_AUTHENTICATED_FULLY\')',
                            'normalization_context' => [
                                'groups' => [
                                    'get',
                                    'get-user-with-role',
                                ],
                            ],
                        ],
                        'put' => [
                            'access_control' => 'is_granted(\'IS_AUTHENTICATED_FULLY\') and object == user',
                            'denormalization_context' => [
                                'groups' => [
                                    'put',
                                ],
                            ],
                            'normalization_context' => [
                                'groups' => [
                                    'get',
                                ],
                            ],
                        ],
                    ],
                ],
                'collectionOperations' => [
                    [
                        'post' => [
                            'denormalization_context' => [
                                'groups' => [
                                    'post',
                                ],
                            ],
                            'normalization_context' => [
                                'groups' => [
                                    'get',
                                ],
                            ],
                        ],
                    ],
                ],
                'attributes' => [
                    [
                        'force_eager' => false,
                    ],
                ],
                'message' => [
                    1 => 'That email is already registered',
                ],
                'fields' => [
                    1 => 'email',
                ],
                'groups' => [
                    1 => [
                        'Default',
                    ],
                ],
                'repositoryClass' => [
                    2 => 'App\\Repository\\UserRepository',
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
            $o[2],
            $o[3],
        ],
        []
    );

});
